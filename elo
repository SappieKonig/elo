#!/usr/bin/env python3

import os
import json
import argparse
from datetime import datetime
from collections import defaultdict
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import time

ELO_INITIAL = 1000
CONFIG_PATH = os.path.expanduser('~/.elo/config')
MATCH_HISTORY_DIR = os.path.expanduser('~/.elo/match_history')


def load_and_process_data(competition):
    history = load_match_history(competition)
    players = get_players(competition)
    player_ratings = defaultdict(lambda: [ELO_INITIAL])
    # player_dates = defaultdict(lambda: [history[0][2]] if history else [])

    current_ratings = {player: ELO_INITIAL for player in get_players(competition)}

    for match in history:
        winner, loser, date = match
        winner_rating, loser_rating = calculate_elo(current_ratings[winner], current_ratings[loser])

        current_ratings[winner] = winner_rating
        current_ratings[loser] = loser_rating

        for player in [winner, loser]:
            player_ratings[player].append(current_ratings[player])
            # player_dates[player].append(date)

        for player in players:
            if player not in [winner, loser]:
                player_ratings[player].append(current_ratings[player])

    return player_ratings#, player_dates


def update_graph(frame, competition, ax):
    player_ratings = load_and_process_data(competition)

    ax.clear()
    for player, ratings in player_ratings.items():
        ax.plot(ratings, label=player.capitalize(), marker='o')

    ax.set_title(f"Elo Ratings Over Time - {competition.capitalize()}")
    ax.set_xlabel("Date")
    ax.set_ylabel("Elo Rating")
    ax.legend()
    ax.grid(True)
    plt.setp(ax.get_xticklabels(), rotation=45, ha='right')


def live_graph_elo(competition):
    fig, ax = plt.subplots(figsize=(12, 6))
    ani = FuncAnimation(fig, update_graph, fargs=(competition, ax), interval=1000)
    plt.tight_layout()
    plt.show()

def get_players(competition) -> set[str]:
    hist = load_match_history(competition)
    return set([match[0].lower() for match in hist] + [match[1].lower() for match in hist])

def load_config():
    if not os.path.exists(CONFIG_PATH):
        return {}
    with open(CONFIG_PATH, 'r') as f:
        return json.load(f)

def save_config(config):
    os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
    with open(CONFIG_PATH, 'w') as f:
        json.dump(config, f)

def load_match_history(competition):
    history_path = os.path.join(MATCH_HISTORY_DIR, f'{competition}.csv')
    if not os.path.exists(history_path):
        return []
    with open(history_path, 'r') as f:
        return [line.strip().split(',') for line in list(f)[1:] if line.strip()]

def save_match_history(competition, history):
    history_path = os.path.join(MATCH_HISTORY_DIR, f'{competition}.csv')
    os.makedirs(os.path.dirname(history_path), exist_ok=True)
    with open(history_path, 'w') as f:
        f.write('winner,loser,timestamp\n')
        for match in history:
            f.write(','.join(match) + '\n')

def calculate_elo(rating1, rating2):
    K = 32
    expected1 = 1 / (1 + 10 ** ((rating2 - rating1) / 400))
    expected2 = 1 - expected1
    new_rating1 = rating1 + K * (1 - expected1)
    new_rating2 = rating2 + K * (-expected2)
    return new_rating1, new_rating2

def update_elo(competition, name1, name2):
    name1 = name1.lower()
    name2 = name2.lower()
    history = load_match_history(competition)
    ratings = recalculate_elo(history)
    for name in name1, name2:
        if name not in ratings:
            ratings[name] = ELO_INITIAL
    new_rating1, new_rating2 = calculate_elo(ratings[name1], ratings[name2])
    timestamp = datetime.now().strftime('%Y-%m-%d')
    history.append([name1, name2, timestamp])
    save_match_history(competition, history)
    return new_rating1, new_rating2

def recalculate_elo(history):
    ratings = {name.lower(): ELO_INITIAL for match in history for name in match[:2]}
    for match in history:
        ratings[match[0]], ratings[match[1]] = calculate_elo(ratings[match[0]], ratings[match[1]])
    return ratings

def create_user(name):
    if input(f'Do you want to create a user named {name}? [y]/n').lower() == 'n':
        exit()

def undo_last_match(competition):
    history = load_match_history(competition)
    if history:
        history.pop()
        save_match_history(competition, history)

def show_ranking(competition):
    history = load_match_history(competition)
    ratings = recalculate_elo(history)
    sorted_ratings = sorted(ratings.items(), key=lambda x: x[1], reverse=True)
    max_name_length = max(len(name) for name, _ in sorted_ratings)
    for name, rating in sorted_ratings:
        print(f'{name.capitalize():<{max_name_length}} {round(rating):>4}')

def main():
    parser = argparse.ArgumentParser(description='ELO Rating System CLI')
    subparsers = parser.add_subparsers(dest='command')

    match_parser = subparsers.add_parser('match', help='Record a match between two players')
    match_parser.add_argument('name1', type=str, help='Name of the first player')
    match_parser.add_argument('name2', type=str, help='Name of the second player')

    undo_parser = subparsers.add_parser('undo', help='Undo the last match')

    ranking_parser = subparsers.add_parser('ranking', help='Show the ranking of players')

    start_parser = subparsers.add_parser('start', help='Start a new competition')
    start_parser.add_argument('competition', type=str, help='Name of the competition')

    change_competition_parser = subparsers.add_parser('change', help='Change the default competition')
    change_competition_parser.add_argument('competition', type=str, help='Name of the new competition')

    list_parser = subparsers.add_parser('list', help='List all existing competitions and the current competition')

    live_graph_parser = subparsers.add_parser('graph', help='Generate a live-updating graph of Elo ratings over time')

    args = parser.parse_args()

    config = load_config()
    if 'default_competition' not in config and args.command not in ['start', 'change_competition']:
        raise Exception('Pick a competition first')
    competition = config.get('default_competition', 'tt_singles')

    if args.command == 'match':
        name1, name2 = args.name1, args.name2
        if name1.lower() not in get_players(competition):
            create_user(name1)
        if name2.lower() not in get_players(competition):
            create_user(name2)
        update_elo(competition, name1, name2)
    elif args.command == 'undo':
        undo_last_match(competition)
    elif args.command == 'ranking':
        show_ranking(competition)
    elif args.command == 'start':
        config['default_competition'] = args.competition
        save_config(config)
    elif args.command == 'change_competition':
        config['default_competition'] = args.competition
        save_config(config)
    elif args.command == 'list':
        competitions = [f for f in os.listdir(MATCH_HISTORY_DIR) if f.endswith('.txt')]
        competitions = [os.path.splitext(f)[0] for f in competitions]
        current_competition = config.get('default_competition', 'tt_singles')
        print(f'Current Competition: {current_competition}')
        print('Existing Competitions:')
        for comp in competitions:
            print(f'  - {comp}')
    elif args.command == 'graph':
        live_graph_elo(competition)

if __name__ == '__main__':
    main()
